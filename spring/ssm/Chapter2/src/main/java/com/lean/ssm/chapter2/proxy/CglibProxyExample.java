package com.lean.ssm.chapter2.proxy;


import java.lang.reflect.Method;

import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;

public class CglibProxyExample implements MethodInterceptor {
	/**
	 * ????CGLIB???????
	 * 
	 * @param cls
	 *            -- Class??
	 * @return Class???CGLIB???????
	 */
	public Object getProxy(Class cls) {
		// CGLIB enhancer????????
		Enhancer enhancer = new Enhancer();
		// ???????????
		enhancer.setSuperclass(cls);
		// ?????????????????????????????????MethodInterceptor????
		enhancer.setCallback(this);
		// ???????????????
		return enhancer.create();
	}

	/**
	 * ???????????
	 * 
	 * @param proxy
	 *            ???????
	 * @param method
	 *            ????
	 * @param args
	 *            ????????
	 * @param methodProxy
	 *            ????????
	 * @return ???????????
	 * @throws Throwable??
	 */
	@Override
	public Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {
		System.err.println("????????????");
		// CGLIB???????????????
		Object result = methodProxy.invokeSuper(proxy, args);
		System.err.println("????????????");
		return result;
	}
}
